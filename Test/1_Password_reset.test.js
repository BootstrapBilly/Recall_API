const test = require("../util/testing_functions")
const testing_variables = require("../util/testing_variables")

/* Since these tests rely on a random crypto token being generated, they are VERY FRAGILE
STEP 1 => RUN ONLY LINES 11 - 44 FIRST 
STEP 2 => RUN ONLY LINES 46-197 (MAKE SURE YOU GET THE RESET TOKENS FROM THE DATABASE - GENERATED BY STEP 1)
*/

// // //! Get password reset email expected failures

// describe("Get password reset email - \x1b[31m  expected failures \x1b[37m", () => {

//     test.post("Gives an empty email", "/password_reset", 400, "Bad request",
//         {
//             email: "",
//         })

//     test.post("Gives a null email", "/password_reset", 400, "Bad request",
//         {
//             email: null,
//         })

// })

// //////* Get password reset email Expected passes

// describe("Get password reset email - \x1b[32m expected passes \x1b[37m", () => {

//     test.post("Enter an email which doesn't exist -> 'No_existo@test.com'", "/password_reset", 200, "If your email address was found, we just sent you an email with instructions to reset your password",
//         {
//             email: "No_existo@test.com",
//         })

//     test.post("Enter an email which does exist -> 'test@test.com'", "/password_reset", 200, "If your email address was found, we just sent you an email with instructions to reset your password",
//         {
//             email: testing_variables.standard_email,
//         })

//     test.post("All caps email requests a password reset", "/password_reset", 200, "If your email address was found, we just sent you an email with instructions to reset your password",
//         {
//             email: testing_variables.all_caps_email,
//         })

// })

// const reset_token = "34f5cd62245be4eaaaae8eab5c1b2f13c2e64637383cfd9c37483ed556a63c52"//!get from the database, changes every time a reset email is generated
// const all_caps_reset_token = "7f2cc2b037af72457c306cd2617cbb2e7f68f6d8dda3e283f9c248c6dc8dd43e"//!get from the database, changes every time a reset email is generated
// const user_id = testing_variables.standard_id//grab the testing user id from the util file (billy.development.practise@gmail.com)

// // //! Reset password expected failures

// describe("Handle password reset - \x1b[31m  expected failures \n\nTHIS WILL NOT WORK WITHOUT A HARDCODED RESET TOKEN AND USER_ID, GET THEM FROM THE USERS COLLECTION\n \x1b[37m", () => {

//     test.post("Enter a user id which does exist, but invalid reset token", "/change_password", 418, "You do not have permission to change this password",
//         {
//             user_id: user_id,
//             token: "invalid token",
//             password: "Password68",
//             repeat_password: "Password68"
//         })

//     test.post("Password which is less than 8 characters -> 'Passwor'", "/change_password", 424, "Your password must be at least 8 characters.",
//         {
//             user_id: user_id,
//             token: reset_token,
//             password: "Passwor",
//             repeat_password: "Passwor"

//         })

//     test.post("Password with no capitals -> 'password67'", "/change_password", 424, "Your password must contain at least 1 uppercase letter.",
//         {
//             user_id: user_id,
//             token: reset_token,
//             password: "password67",
//             repeat_password: "password67"

//         })

//     test.post("Passwords which do not match", "/change_password", 424, "Your passwords must match.",
//         {
//             user_id: user_id,
//             token: reset_token,
//             password: "password67",
//             repeat_password: "no matcho"

//         })

//     test.post("Null user id in the request", "/change_password", 400, "Bad request",
//         {
//             user_id: null,
//             token: "invalid token",
//             password: "Password68",
//             repeat_password: "Password68"
//         })

//     test.post("Empty user id in the request", "/change_password", 400, "Bad request",
//         {
//             user_id: "",
//             token: "invalid token",
//             password: "Password68",
//             repeat_password: "Password68"
//         })

//     test.post("Null token in the request", "/change_password", 400, "Bad request",
//         {
//             user_id: testing_variables.standard_id,
//             token: null,
//             password: "Password68",
//             repeat_password: "Password68"
//         })

//     test.post("Empty token in the request", "/change_password", 400, "Bad request",
//         {
//             user_id: testing_variables.standard_id,
//             token: "",
//             password: "Password68",
//             repeat_password: "Password68"
//         })


//     test.post("Null password", "/change_password",  400, "Bad request",
//         {
//             user_id: user_id,
//             token: reset_token,
//             password: null,
//             repeat_password: testing_variables.standard_password

//         })

//     test.post("Empty password", "/change_password", 400, "Bad request",
//         {
//             user_id: user_id,
//             token: reset_token,
//             password: "",
//             repeat_password: testing_variables.standard_password

//         })

//     test.post("Null repeat password", "/change_password",  400, "Bad request",
//         {
//             user_id: user_id,
//             token: reset_token,
//             password: testing_variables.standard_password,
//             repeat_password: null

//         })

//     test.post("Empty repeat password", "/change_password",  400, "Bad request",
//         {
//             user_id: user_id,
//             token: reset_token,
//             password: testing_variables.standard_email,
//             repeat_password: null

//         })

// })

// //* Reset password Expected passes

// describe("Handle password reset - \x1b[32m expected passes \x1b[37m", () => {

//     test.post("Valid user id, token and password", "/change_password", 201, "Your password has been updated",
//         {
//             user_id: testing_variables.standard_id,
//             token: reset_token,
//             password: "Password6123",
//             repeat_password: "Password6123"

//         })

//     test.post_check_res_user_id("Logs in with new password after reseting it", "/login", 200, "Login successful", testing_variables.standard_id,
//         {
//             email: testing_variables.standard_email,
//             password: "Password6123"
//         },
//     )

//     test.post("Changes their password to the same as what it was before", "/change_password", 201, "Your password has been updated",
//         {
//             user_id: testing_variables.all_caps_id,
//             token: all_caps_reset_token,
//             password: testing_variables.all_caps_password,
//             repeat_password: testing_variables.all_caps_password

//         })

        
//     test.post_check_res_user_id("Logs in with new password after reseting it", "/login", 200, "Login successful", testing_variables.all_caps_id,
//     {
//         email: testing_variables.all_caps_email,
//         password: testing_variables.all_caps_password
//     },
// )

// })
